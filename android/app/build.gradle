def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    // throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.selendra.secure_wallet"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    
    signingConfigs{
        release{
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile  keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    def proguard_list = [
        "$project.rootDir/buildsettings/proguard/proguard-constraintlayout.pro",
        "$project.rootDir/buildsettings/proguard/proguard-google-play-services.pro",
        "$project.rootDir/buildsettings/proguard/proguard-project.pro"
    ]

    buildTypes {
        release {
            debuggable false                // make app non-debuggable
            
            crunchPngs true                 // shrink images

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true
            
            useProguard true                // apply proguard
            proguard_list.each {            
                pro_guard -> proguardFile pro_guard
            }

            // signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
        }
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }
    namespace 'com.selendra.secure_wallet'

}

flutter {
    source '../..'
}

dependencies {
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:31.0.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    constraints {

        implementation('com.stripe:stripe-android') {

            version {
                strictly '20.11.0'
            }
        }
    }

    constraints {

        implementation('com.stripe:financial-connections') {

            version {
                strictly '20.11.0'
            }
        }
    }
}
